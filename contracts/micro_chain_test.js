const Chain3 = require("chain3");
const fs = require("fs");
const solc = require("solc");

var mainaddress = "0xad9d80a7b374f23d2ddfa0febbd43edcad41c9a5";
var createboardaddress = "0x44c10f4cd26dbb33b0cc3bd8d9fb4e313498cfa0";

const vnodeUri = "http://127.0.0.1:8999";
var address = "";
let chain3 = new Chain3();
chain3.setProvider(new chain3.providers.HttpProvider(vnodeUri));

if (!chain3.isConnected()) {
  throw new Error("unable to connect to moac vnode at " + vnodeUri);
} else {
  console.log("connected to moac vnode at " + vnodeUri);
  let coinbase = mainaddress;
  console.log("mainaddress:" + coinbase);
  let balance = chain3.mc.getBalance(coinbase);
  console.log("balance:" + balance / 1000000000000000000 + " MC");

  console.log("createboardaddress:" + createboardaddress);
  balance = chain3.mc.getBalance(createboardaddress);
  console.log("balance:" + balance / 1000000000000000000 + " MC");

  let accounts = chain3.mc.accounts;
  console.log(accounts);

  address = coinbase;
  if (chain3.personal.unlockAccount(address, "test", 0)) {
    console.log(`${address} is unlocked`);
  } else {
    console.log(`unlock failed, ${address}`);
    throw new Error("unlock failed " + address);
  }

  address = createboardaddress;
  if (chain3.personal.unlockAccount(address, "moac", 0)) {
    console.log(`${address} is unlocked`);
  } else {
    console.log(`createboardaddress unlock failed, ${address}`);
    throw new Error("createboardaddress unlock failed " + address);
  }
}



//==========================================================================
//==========================================================================
console.log("### Deploying the subchainprotocolbaseContract");

var contract = fs.readFileSync(
  "../../../../../contracts/SubChainProtocolBase.sol",
  "utf8"
);

var output = solc.compile(contract, 1);

var abi = output.contracts[":SubChainProtocolBase"].interface;
var bin = output.contracts[":SubChainProtocolBase"].bytecode;

var protocol = "POR";
var bmin = 3;
var subchainprotocolbaseContract = chain3.mc.contract(JSON.parse(abi));
var subchainprotocolbase = subchainprotocolbaseContract.new(protocol, bmin, {
  from: mainaddress,
  data: "0x" + bin,
  gas: "9000000"
});

console.log(
  "subchainprotocolbaseContract is being deployed transaction: " +
    subchainprotocolbase.transactionHash
);
waitBlock(subchainprotocolbase.transactionHash);
subchainprotocolbase = subchainprotocolbaseContract.at(
  chain3.mc.getTransactionReceipt(subchainprotocolbase.transactionHash)
    .contractAddress
);

//==========================================================================
//==========================================================================
console.log("### Deploying the vnodeprotocolbaseContract");

var contract = fs.readFileSync(
  "../../../../../contracts/VnodeProtocolBase.sol",
  "utf8"
);

var output = solc.compile(contract, 1);

var abi = output.contracts[":VnodeProtocolBase"].interface;
var bin = output.contracts[":VnodeProtocolBase"].bytecode;

var bmin = 1;
var vnodeprotocolbaseContract = chain3.mc.contract(JSON.parse(abi));
var vnodeprotocolbase = vnodeprotocolbaseContract.new(bmin, {
  from: mainaddress,
  data: "0x" + bin,
  gas: "4700000"
});

console.log(
  "vnodeprotocolbaseContract is being deployed transaction: " +
    vnodeprotocolbase.transactionHash
);
waitBlock(vnodeprotocolbase.transactionHash);
vnodeprotocolbase = vnodeprotocolbaseContract.at(
  chain3.mc.getTransactionReceipt(vnodeprotocolbase.transactionHash)
    .contractAddress
);

//==========================================================================
//==========================================================================

console.log("### Deploying the subchainbaseContract");

var input = {
  "": fs.readFileSync("../../../../../contracts/SubChainBase.sol", "utf8"),
  "SubChainProtocolBase.sol": fs.readFileSync(
    "../../../../../contracts/SubChainProtocolBase.sol",
    "utf8"
  )
};

var output = solc.compile({ sources: input }, 1);

var abi = output.contracts[":SubChainBase"].interface;
var bin = output.contracts[":SubChainBase"].bytecode;

console.log("subchainprotocolbase.address:" + subchainprotocolbase.address);
console.log("vnodeprotocolbase.address:" + vnodeprotocolbase.address);

var proto = subchainprotocolbase.address;
var vnodeProtocolBaseAddr = vnodeprotocolbase.address;
var min = 1;
var max = 10;
var thousandth = 1;
var flushRound = 20;
var subchainbaseContract = chain3.mc.contract(JSON.parse(abi));
var subchainbase = subchainbaseContract.new(
  proto,
  vnodeProtocolBaseAddr,
  min,
  max,
  thousandth,
  flushRound,
  {
    from: mainaddress,
    data: "0x" + bin,
    gas: "9000000"
  }
);

console.log(
  "subchainbaseContract is being deployed transaction: " +
    subchainbase.transactionHash
);
waitBlock(subchainbase.transactionHash);
subchainbase = subchainbaseContract.at(
  chain3.mc.getTransactionReceipt(subchainbase.transactionHash).contractAddress
);

//==========================================================================
//0xaE6E5aBe58B63Ab7129fF77c6d2c000F5b2F0244
//0x8A6c516367EadB886B36197300DEaaB7BE5867DC
//0xb1fe3ec07271F7Df21871314E05EdB463be05890
//
//==========================================================================
console.log("### Sending MC to scs1, scs2, scs3 and scsm");
scs1 = "0x6806344fd25bea9a038f5fe122bb6ac33eea7812";
sendtx(mainaddress, scs1, 20);
waitBalance(scs1, 20);

scs2 = "0x21ad8520c9ddb6b982b9a01e915f8900a65560a3";
sendtx(mainaddress, scs2, 20);
waitBalance(scs2, 20);

scs3 = "0x61f97cc6c1457f3bf31e249a6d68d1fc06298947";
sendtx(mainaddress, scs3, 20);
waitBalance(scs3, 20);

scsm = "0xe543dd0656ed71984d31b9d18692fd6bc9ce43d0";
sendtx(mainaddress, scsm, 20);
waitBalance(scsm, 20);

// scsm="0x3e0025B9fCDC70B7cf63A6c087345aFFE2Df7301";
// sendtx(cmainaddress, scsm, 20);
// waitBalance(scsm, 20);

addfundtosubchain(subchainbase.address);
waitBalance(subchainbase.address, 10);

//==========================================================================
//==========================================================================
console.log("### Registering SCS to the pool");

registertopool(subchainprotocolbase.address, scs1);
registertopool(subchainprotocolbase.address, scs2);
registertopool(subchainprotocolbase.address, scs3);

while (true) {
  let count = subchainprotocolbase.scsCount();
  if (count > 2) {
    console.log("registertopool has enough scs " + count);
    break;
  }
  console.log("Waiting registertopool, current scs count=" + count);
  sleep(5000);
}

let scslist = subchainprotocolbase.scsList(scs3);
//let scslist=subchainprotocolbase.scsList(scs1);
console.log(scslist);

let startnum = chain3.mc.blockNumber;
while (true) {
  let number = chain3.mc.blockNumber;
  if (number > startnum + 5) {
    console.log("reached target block number " + number);
    break;
  }
  console.log("Waiting block number, current block number=" + number);
  sleep(5000);
}

console.log("### Trigger Register OPEN ...");
registeropen();

console.log("### Register OPEN is waiting for SCS ...");
while (true) {
  let count = subchainbase.nodeCount();
  if (count > 0) {
    console.log("registertopool has enough scs " + count);
    break;
  }
  console.log("Waiting registertopool, current scs count=" + count);
  sleep(5000);
}

console.log("### Register CLOSE ...");
registerclose();
sleep(15000);

console.log("### Register SCS Monitor");
subchainRegisterAsMonitor(scsm, bmin);

//==========================================================================
//==========================================================================
console.log("### Waiting for the subchain initialization ...");
sleep(40000);

console.log("### Deploying the lianwen subchain ...");
var baseaddr = mainaddress;
var nonce = 0;

deChatDeploy(baseaddr, subchainbase.address, nonce);

sleep(15000);

//==========================================================================
//==========================================================================
console.log("### Add the new LianWen channel to LianWen Board ...");

var dechatmanagementaddr = "0x262c6ffc3b579fd932266ed6a646de5077ebe78b";
var dechatmanagementAbi =
  '[{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"boardList","outputs":[{"name":"subchainAddr","type":"address"},{"name":"deployLwSolAdmin","type":"address"},{"name":"marketableTokenAddr","type":"address"},{"name":"rpcIp","type":"bytes32"},{"name":"boardName","type":"bytes32"},{"name":"picPath","type":"bytes32"},{"name":"boardStatus","type":"uint256"},{"name":"exchangeRate","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"status","type":"uint256"},{"name":"subchainAddr","type":"address"}],"name":"updateBoardStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"status","type":"uint256"}],"name":"getBoardlist","outputs":[{"name":"","type":"address[]"},{"name":"","type":"bytes32[]"},{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"subchainAddr","type":"address"},{"name":"deployLwSolAdmin","type":"address"},{"name":"marketableTokenAddr","type":"address"},{"name":"rpcIp","type":"bytes32"},{"name":"boardName","type":"bytes32"},{"name":"picPath","type":"bytes32"},{"name":"exchangeRate","type":"uint256"}],"name":"creatBoard","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[],"payable":true,"stateMutability":"payable","type":"constructor"}]';

var dechatmanagementContract = chain3.mc.contract(
  JSON.parse(dechatmanagementAbi)
);
var dechatmanagement = dechatmanagementContract.at(dechatmanagementaddr);

var deployLwSolAdmin = mainaddress;
var marketableTokenAddr = "0x94915fcb066ce1c965a8c8178e289b22d7824900";
var rpcIp = "http://52.42.170.217:8548/rpc";

var boardName = "MoacDemoTest";
const args = process.argv.slice(2);
if (args.length > 0) {
  boardName = args[0];
}
console.log("### Lianwen name: " + boardName);
var picPath = "wwww.test.com/test.img";
var num = 10;

creatBoard(
  createboardaddress,
  subchainbase.address,
  deployLwSolAdmin,
  marketableTokenAddr,
  rpcIp,
  boardName,
  picPath,
  num
);

console.log("### Creating board done!");

//==========================================================================
//==========================================================================

console.log("### All done!!!\n");
sleep(1000);
console.log("Please go to testnet.moac.io to monitor the microchain.\n");
sleep(1000);
console.log("Subchain Base Address: " + subchainbase.address + "\n");
sleep(1000);
console.log("IP: 52.42.170.217\n");
console.log("Port: 8548\n");

function registertopool(contractadd, scsaddress) {
  var registerdata =
    "0x4420e486000000000000000000000000" + scsaddress.substring(2);
  sendtx(mainaddress, contractadd, 12, registerdata);
}

function registeropen() {
  sendtx(mainaddress, subchainbase.address, 0, "0x5defc56c");
}

function addfundtosubchain() {
  sendtx(mainaddress, subchainbase.address, 10, "0xa2f09dfa");
}

function registerclose() {
  sendtx(mainaddress, subchainbase.address, 0, "0x69f3576f");
}

function subchainRegisterAsMonitor(scsAddr, coins) {
  sendtx(
    mainaddress,
    subchainbase.address,
    coins,
    "0x4e592e2f000000000000000000000000" + scsAddr.substring(2)
  );
}

function waitBlock(transactionHash) {
  while (true) {
    let receipt = chain3.mc.getTransactionReceipt(transactionHash);
    if (receipt && receipt.contractAddress) {
      console.log("contract has been deployed at " + receipt.contractAddress);
      break;
    }
    console.log(
      "Waiting a mined block to include your contract... currently in block " +
        chain3.mc.blockNumber
    );
    sleep(5000);
  }
}

function waitBalance(addr, target) {
  while (true) {
    let balance = chain3.mc.getBalance(addr) / 1000000000000000000;
    if (balance >= target) {
      console.log("account has enough balance " + balance);
      break;
    }
    console.log("Waiting the account has enough balance " + balance);
    sleep(5000);
  }
}

function sendtx(src, tgtaddr, amount, strData) {
  chain3.mc.sendTransaction({
    from: src,
    value: chain3.toSha(amount, "mc"),
    to: tgtaddr,
    gas: "2000000",
    gasPrice: chain3.mc.gasPrice,
    data: strData
  });

  console.log(
    "sending from:" +
      src +
      " to:" +
      tgtaddr +
      " amount:" +
      amount +
      " with data:" +
      strData
  );
}

function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e70; i++) {
    if (new Date().getTime() - start > milliseconds) {
      break;
    }
  }
}

//==========================

function deChatDeploy(baseaddr, subchainaddr, nonce) {
  var code =
    "";
  var dechataddr = "0xd344716b819fc0e8bb5935756e6ed8da6b3077b9";
  var devaddr = "0xd344716b819fc0e8bb5935756e6ed8da6b3077b9";
  code += "000000000000000000000000" + dechataddr.substr(2, 100);
  code += "000000000000000000000000" + devaddr.substr(2, 100);
  subchaindeploycode(baseaddr, subchainaddr, code, nonce);
}

function subchaindeploycode(baseaddr, subchainaddr, code, nonce) {
  sendshardingflagtx(
    baseaddr,
    subchainaddr,
    //1000000000000000000000000,
    0,
    code,
    nonce
  );
}

function sendshardingflagtx(baseaddr, subchainaddr, amount, code, n) {
  chain3.mc.sendTransaction({
    from: baseaddr,
    value: amount,
    to: subchainaddr,
    gas: "0", //'200000',
    gasPrice: chain3.mc.gasPrice,
    ShardingFlag: "0x1",
    data: code,
    nonce: n,
    via: "0xD814F2ac2c4cA49b33066582E4e97EBae02F2aB9"
  });

  console.log(
    "sending from:" + baseaddr + " to:" + subchainaddr + " with nonce:" + n
  );
}

function creatBoard(
  sender,
  subchainAddr,
  deployLwSolAdmin,
  marketableTokenAddr,
  rpcIp,
  boardName,
  picPath,
  num
) {
  var data = dechatmanagement.creatBoard.getData(
    subchainAddr,
    deployLwSolAdmin,
    marketableTokenAddr,
    rpcIp,
    boardName,
    picPath,
    num
  );
  sendtx(sender, dechatmanagement.address, "0", data);
}
